<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>Add Movie</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <script src="https://cdn.tailwindcss.com"></script>
</head>

<body class="bg-gray-900 text-white min-h-screen p-6">
    <div class="max-w-2xl mx-auto bg-gray-800 p-6 rounded-lg shadow-lg">
        <h1 class="text-3xl font-bold mb-6 text-center text-green-400">‚ûï Add New Movie</h1>

        <% if (!isAdmin) { %>
            <p class="text-red-500 text-center">Access Denied. Only admins can add movies.</p>
            <% } else { %>
                <!-- Debug info -->
                <div id="debug-info" class="mb-4 p-3 bg-blue-900 rounded hidden">
                    <h3 class="text-blue-400 font-bold">Form Data Preview:</h3>
                    <pre id="form-preview" class="text-sm mt-2"></pre>
                </div>

                <form id="movieForm" action="/admin/add?admin=8892" method="POST" class="grid gap-4">
                    <input type="text" name="title" placeholder="Title" required class="p-3 rounded bg-gray-700" />
                    <textarea name="description" placeholder="Description" rows="4" required class="p-3 rounded bg-gray-700"></textarea>
                    <input type="text" name="cast" placeholder="Cast (comma-separated)" required class="p-3 rounded bg-gray-700" />
                    <input type="text" name="genre" placeholder="Genre (comma-separated)" required class="p-3 rounded bg-gray-700" />
                    <input type="text" name="movieLanguage" placeholder="Language" required class="p-3 rounded bg-gray-700" />
                    <input type="text" name="quality" placeholder="Quality (comma-separated)" required class="p-3 rounded bg-gray-700" />
                    <input type="url" name="poster" placeholder="Poster URL" required class="p-3 rounded bg-gray-700" />

                    <!-- Screenshot inputs - ORIGINAL FORMAT with same name -->
                    <div>
                        <label class="block mb-2 font-semibold text-green-400">Screenshots (Minimum 3 Required)</label>
                        <input type="url" name="screenshots" class="screenshot-input block w-full p-2 mb-2 bg-gray-700 rounded" placeholder="Screenshot 1 URL" required>
                        <input type="url" name="screenshots" class="screenshot-input block w-full p-2 mb-2 bg-gray-700 rounded" placeholder="Screenshot 2 URL" required>
                        <input type="url" name="screenshots" class="screenshot-input block w-full p-2 mb-2 bg-gray-700 rounded" placeholder="Screenshot 3 URL" required>
                        <input type="url" name="screenshots" class="screenshot-input block w-full p-2 mb-2 bg-gray-700 rounded" placeholder="Screenshot 4 URL (Optional)">
                        <input type="url" name="screenshots" class="screenshot-input block w-full p-2 mb-2 bg-gray-700 rounded" placeholder="Screenshot 5 URL (Optional)">
                    </div>

                    <!-- Quality links - ORIGINAL FORMAT -->
                    <div>
                        <label class="block mb-2 font-semibold text-green-400">Download Links by Quality</label>
                        <input type="url" name="qualityLinks[480p]" placeholder="480p Download Link" class="p-3 rounded bg-gray-700 mb-2" />
                        <input type="url" name="qualityLinks[720p]" placeholder="720p Download Link" class="p-3 rounded bg-gray-700 mb-2" />
                        <input type="url" name="qualityLinks[1080p]" placeholder="1080p Download Link" class="p-3 rounded bg-gray-700 mb-2" />
                        <input type="url" name="qualityLinks[other]" placeholder="Other Quality Link" class="p-3 rounded bg-gray-700" />
                    </div>

                    <button type="button" onclick="toggleDebug()" class="bg-blue-600 hover:bg-blue-700 px-4 py-2 rounded text-sm">
                    üîç Preview Form Data
                </button>

                    <button type="submit" class="bg-green-600 hover:bg-green-700 px-6 py-3 rounded-lg font-semibold">
                    ‚ûï Add Movie
                </button>
                </form>

                <script>
                    function toggleDebug() {
                        const debugDiv = document.getElementById('debug-info');
                        const formPreview = document.getElementById('form-preview');
                        const form = document.getElementById('movieForm');

                        if (debugDiv.classList.contains('hidden')) {
                            const formData = new FormData(form);
                            const data = {};

                            // Handle multiple values with same name (screenshots)
                            for (let [key, value] of formData.entries()) {
                                if (data[key]) {
                                    if (Array.isArray(data[key])) {
                                        data[key].push(value);
                                    } else {
                                        data[key] = [data[key], value];
                                    }
                                } else {
                                    data[key] = value;
                                }
                            }

                            formPreview.textContent = JSON.stringify(data, null, 2);
                            debugDiv.classList.remove('hidden');
                        } else {
                            debugDiv.classList.add('hidden');
                        }
                    }

                    // FIXED validation for original format
                    document.getElementById("movieForm").addEventListener("submit", function(e) {
                        const screenshotInputs = document.querySelectorAll("input[name='screenshots']");
                        const filledScreenshots = [];
                        const emptyScreenshots = [];

                        screenshotInputs.forEach((input, index) => {
                            const value = input.value.trim();
                            if (value) {
                                filledScreenshots.push({
                                    index: index + 1,
                                    value
                                });
                            } else if (index < 3) { // First 3 are required
                                emptyScreenshots.push(index + 1);
                            }
                        });

                        console.log('Screenshot validation:', {
                            total: screenshotInputs.length,
                            filled: filledScreenshots.length,
                            empty: emptyScreenshots.length,
                            filledScreenshots,
                            emptyScreenshots
                        });

                        // Check if at least first 3 are filled
                        if (emptyScreenshots.length > 0) {
                            alert(`‚ùå Please fill in Screenshot ${emptyScreenshots.join(', ')}. The first 3 screenshots are required.`);
                            // Focus on first empty required field
                            screenshotInputs[emptyScreenshots[0] - 1].focus();
                            e.preventDefault();
                            return;
                        }

                        // Validate URL formats for filled screenshots
                        for (let screenshot of filledScreenshots) {
                            if (!isValidURL(screenshot.value)) {
                                alert(`‚ùå Invalid URL format in Screenshot ${screenshot.index}. Please enter a valid URL starting with http:// or https://`);
                                screenshotInputs[screenshot.index - 1].focus();
                                e.preventDefault();
                                return;
                            }
                        }

                        // Show loading state
                        const submitBtn = e.target.querySelector('button[type="submit"]');
                        const originalText = submitBtn.innerHTML;
                        submitBtn.innerHTML = '‚è≥ Adding Movie...';
                        submitBtn.disabled = true;

                        // Re-enable button after 10 seconds in case of error
                        setTimeout(() => {
                            if (submitBtn.disabled) {
                                submitBtn.innerHTML = originalText;
                                submitBtn.disabled = false;
                            }
                        }, 10000);
                    });

                    function isValidURL(string) {
                        try {
                            new URL(string);
                            return string.startsWith('http://') || string.startsWith('https://');
                        } catch (_) {
                            return false;
                        }
                    }

                    // Auto-save form data to prevent loss
                    const form = document.getElementById('movieForm');
                    const inputs = form.querySelectorAll('input, textarea');

                    inputs.forEach(input => {
                        const storageKey = `movieForm_${input.name}_${input.placeholder || ''}`;

                        // Load saved data
                        const saved = localStorage.getItem(storageKey);
                        if (saved && !input.value) {
                            input.value = saved;
                        }

                        // Save data on change
                        input.addEventListener('input', () => {
                            if (input.value.trim()) {
                                localStorage.setItem(storageKey, input.value);
                            } else {
                                localStorage.removeItem(storageKey);
                            }
                        });
                    });

                    // Clear saved data on successful submission
                    form.addEventListener('submit', () => {
                        // Only clear if form actually submits (no validation errors)
                        setTimeout(() => {
                            if (!form.querySelector('button[type="submit"]').disabled) {
                                inputs.forEach(input => {
                                    const storageKey = `movieForm_${input.name}_${input.placeholder || ''}`;
                                    localStorage.removeItem(storageKey);
                                });
                            }
                        }, 2000);
                    });

                    // Add visual feedback for validation
                    document.querySelectorAll('input[required], textarea[required]').forEach(input => {
                        input.addEventListener('blur', function() {
                            if (this.value.trim()) {
                                this.classList.remove('border-red-500');
                                this.classList.add('border-green-500');
                            } else {
                                this.classList.remove('border-green-500');
                                this.classList.add('border-red-500');
                            }
                        });
                    });
                </script>
                <% } %>
    </div>
</body>

</html>